{"version":3,"file":"gateway-middleware.js","names":["_jsonwebtoken","_interopRequireDefault","require","_errorHandler","_fs","_path","e","__esModule","default","secretPath","path","resolve","__dirname","apiGatewayToken","fs","existsSync","readFileSync","trim","console","log","tokens","verifyGatewayRequest","req","_res","next","_req$headers","_req$headers2","headers","gatewaytoken","NotAuthorizedError","token","payload","JWT","verify","includes","id","error"],"sources":["../../src/gateway-middleware.ts"],"sourcesContent":["import JWT from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\nimport { NotAuthorizedError } from './error-handler';\nimport fs from 'fs';\nimport path from 'path';\n\nconst secretPath = path.resolve(__dirname, '../../../../../../../.gateway-test');\nlet apiGatewayToken = '';\nif (fs.existsSync(secretPath)) {\n  apiGatewayToken = fs.readFileSync(secretPath, 'utf8').trim();\n  //console.log(apiGatewayToken);\n} else {\n  console.log(`The file does not exist. Please create the file at the expected path: ${secretPath} with the gateway token.`);\n}\n\nconst tokens: string[] = ['auth', 'seller', 'gig', 'search', 'buyer', 'message', 'order', 'review'];\n\nexport function verifyGatewayRequest(req: Request, _res: Response, next: NextFunction): void {\n  if (!req.headers?.gatewaytoken) {\n    throw new NotAuthorizedError('Invalid request', 'verifyGatewayRequest() method: Request not coming from api gateway');\n  }\n  const token: string = req.headers?.gatewaytoken as string;\n  if (!token) {\n    throw new NotAuthorizedError('Invalid request', 'verifyGatewayRequest() method: Request not coming from api gateway');\n  }\n\n  try {\n    const payload: { id: string; iat: number } = JWT.verify(token, apiGatewayToken) as { id: string; iat: number };\n    if (!tokens.includes(payload.id)) {\n      throw new NotAuthorizedError('Invalid request', 'verifyGatewayRequest() method: Request payload is invalid');\n    }\n  } catch (error) {\n    throw new NotAuthorizedError('Invalid request', 'verifyGatewayRequest() method: Request not coming from api gateway');\n  }\n  next();\n}\n"],"mappings":";;;;AAAA,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,GAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,KAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAAwB,SAAAD,uBAAAK,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAExB,MAAMG,UAAU,GAAGC,aAAI,CAACC,OAAO,CAACC,SAAS,EAAE,oCAAoC,CAAC;AAChF,IAAIC,eAAe,GAAG,EAAE;AACxB,IAAIC,WAAE,CAACC,UAAU,CAACN,UAAU,CAAC,EAAE;EAC7BI,eAAe,GAAGC,WAAE,CAACE,YAAY,CAACP,UAAU,EAAE,MAAM,CAAC,CAACQ,IAAI,CAAC,CAAC;EAC5D;AACF,CAAC,MAAM;EACLC,OAAO,CAACC,GAAG,CAAC,yEAAyEV,UAAU,0BAA0B,CAAC;AAC5H;AAEA,MAAMW,MAAgB,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;AAE5F,SAASC,oBAAoBA,CAACC,GAAY,EAAEC,IAAc,EAAEC,IAAkB,EAAQ;EAAA,IAAAC,YAAA,EAAAC,aAAA;EAC3F,IAAI,GAAAD,YAAA,GAACH,GAAG,CAACK,OAAO,aAAXF,YAAA,CAAaG,YAAY,GAAE;IAC9B,MAAM,IAAIC,gCAAkB,CAAC,iBAAiB,EAAE,oEAAoE,CAAC;EACvH;EACA,MAAMC,KAAa,IAAAJ,aAAA,GAAGJ,GAAG,CAACK,OAAO,qBAAXD,aAAA,CAAaE,YAAsB;EACzD,IAAI,CAACE,KAAK,EAAE;IACV,MAAM,IAAID,gCAAkB,CAAC,iBAAiB,EAAE,oEAAoE,CAAC;EACvH;EAEA,IAAI;IACF,MAAME,OAAoC,GAAGC,qBAAG,CAACC,MAAM,CAACH,KAAK,EAAEjB,eAAe,CAAgC;IAC9G,IAAI,CAACO,MAAM,CAACc,QAAQ,CAACH,OAAO,CAACI,EAAE,CAAC,EAAE;MAChC,MAAM,IAAIN,gCAAkB,CAAC,iBAAiB,EAAE,2DAA2D,CAAC;IAC9G;EACF,CAAC,CAAC,OAAOO,KAAK,EAAE;IACd,MAAM,IAAIP,gCAAkB,CAAC,iBAAiB,EAAE,oEAAoE,CAAC;EACvH;EACAL,IAAI,CAAC,CAAC;AACR","ignoreList":[]}